module Plans.PartialPlan (

) where

import Graphs.LabeledGraphInterface
import Plans.Plan
import Plans.CoveringGraph

data PartialPlan x = PartialPlan {
  assigned :: Plan x,
  openEnds :: [CoveringNode] 
}

isComplete :: PartialPlan x -> Bool
isComplete = null . openEnds

extendOneStep :: LabeledGraphInterface g x -> g
                 -> PartialPlan x -> [PartialPlan x]
extendOneStep gi g pplan = do undefined
  -- take next turningWord and generate all Spirals for the turning word in the graph
  -- get the openEnds that feed into the spiral
  -- remove them from openEnds
  -- generate all possiblities how the counterpoints on the spiral can cover for the open ends, call such a possibility a generator
  -- pick a generator and a spiral and generate all the subspiral of the spiral that is generated by the generator, do a nub on the list of all subspirals and return it!
  -- add the subspiral to the plan and return and add all the nodes on the subspiral to the open ends.
